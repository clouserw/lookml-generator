window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "generator", "modulename": "generator", "kind": "module", "doc": "<p>Generate LookML.</p>\n\n<h1 id=\"lookml-generator\">lookml-generator</h1>\n\n<p><a href=\"https://circleci.com/gh/mozilla/lookml-generator/?branch=main\"><img src=\"https://circleci.com/gh/mozilla/lookml-generator.svg?style=svg\" alt=\"mozilla\" /></a></p>\n\n<p>LookML Generator for Glean and Mozilla Data.</p>\n\n<p>The lookml-generator has two important roles:</p>\n\n<ol>\n<li>Generate a listing of all Glean/Mozilla namespaces and their associated BigQuery tables</li>\n<li>From that listing, generate LookML for views, explores, and dashboards and push those to the <a href=\"https://github.com/mozilla/looker-hub\">Look Hub project</a></li>\n</ol>\n\n<h2 id=\"generating-namespace-listings\">Generating Namespace Listings</h2>\n\n<p>At Mozilla, a namespace is a single functional area that is represented in Looker with (usually) one model*.\nEach Glean application is self-contained within a single namespace, containing the data from <a href=\"https://probeinfo.telemetry.mozilla.org/v2/glean/app-listings\">across that application's channels</a>.\nWe also support custom namespaces, which can use wildcards to denote their BigQuery datasets and tables. These are described in <code>custom-namespaces.yaml</code>.</p>\n\n<p><img src=\"https://github.com/mozilla/lookml-generator/blob/main/architecture/namespaces.jpg?raw=true\" alt=\"alt text\" /></p>\n\n<blockquote>\n  <p>*  Though namespaces are not limited to a single model, we advise it for clarity's sake.</p>\n</blockquote>\n\n<h2 id=\"adding-custom-namespaces\">Adding Custom Namespaces</h2>\n\n<p>Custom namespaces need to be defined explicitly in <code>custom-namespaces.yaml</code>. For each namespace views and explores to be generated need to be specified.</p>\n\n<p>Make sure the custom namespaces is _not_ listed in <code>namespaces-disallowlist.yaml</code>.</p>\n\n<p>Once changes have been approved and merged, the <a href=\"#deploying-new-lookml-generator-changes\">lookml-generator changes can get deployed</a>.</p>\n\n<h2 id=\"generating-lookml\">Generating LookML</h2>\n\n<p>Once we know which tables are associated with which namespaces, we can generate LookML files and update our Looker instance.</p>\n\n<p>Lookml-generator generates LookML based on both the BigQuery schema and manual changes. For example, we would want to add <code>city</code> drill-downs for all <code>country</code> fields.\n<img src=\"https://github.com/mozilla/lookml-generator/blob/main/architecture/lookml.jpg?raw=true\" alt=\"alt text\" /></p>\n\n<h3 id=\"pushing-changes-to-dev-branches\">Pushing Changes to Dev Branches</h3>\n\n<p>In addition to pushing new lookml to the <a href=\"https://github.com/mozilla/looker-hub\">main branch</a>, we reset the dev branches to also\npoint to the commit at <code>main</code>. This only happens during production deployment runs.</p>\n\n<p>To automate this process for your dev branch, add it to <a href=\"https://github.com/mozilla/lookml-generator/tree/main/bin/dev_branches\">this file</a>.\nYou can edit that file in your browser. Open a PR and tag <a href=\"https://github.com/orgs/mozilla/teams/data-looker\">data-looker</a> for review.\nYou can find your dev branch by going to <a href=\"https://mozilla.cloud.looker.com\">Looker</a>, entering development mode, opening the <a href=\"https://mozilla.cloud.looker.com/projects/looker-hub\"><code>looker-hub</code></a>\nproject, clicking the \"Git Actions\" icon, and finding your personal branch in the \"Current Branch\" dropdown.</p>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>Ensure Python 3.10+ is available on your machine (see <a href=\"https://docs.python-guide.org/starting/install3/osx/\">this guide</a> for instructions if you're on a mac and haven't installed anything other than the default system Python.)</p>\n\n<p>You will also need the Google Cloud SDK with valid credentials.\nAfter setting up the Google Cloud SDK, run:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>gcloud<span class=\"w\"> </span>config<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>project<span class=\"w\"> </span>moz-fx-data-shared-prod\ngcloud<span class=\"w\"> </span>auth<span class=\"w\"> </span>login<span class=\"w\"> </span>--update-adc\n</code></pre>\n</div>\n\n<p>Install requirements in a Python venv</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3.10<span class=\"w\"> </span>-m<span class=\"w\"> </span>venv<span class=\"w\"> </span>venv/\nvenv/bin/pip<span class=\"w\"> </span>install<span class=\"w\"> </span>--no-deps<span class=\"w\"> </span>-r<span class=\"w\"> </span>requirements.txt\n</code></pre>\n</div>\n\n<p>Update requirements when they change with <code>pip-sync</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>venv/bin/pip-sync\n</code></pre>\n</div>\n\n<p>Setup pre-commit hooks</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>venv/bin/pre-commit<span class=\"w\"> </span>install\n</code></pre>\n</div>\n\n<p>Run unit tests and linters</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>venv/bin/pytest\n</code></pre>\n</div>\n\n<p>Run integration tests</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>venv/bin/pytest<span class=\"w\"> </span>-m<span class=\"w\"> </span>integration\n</code></pre>\n</div>\n\n<p>Note that the integration tests require a valid login to BigQuery to succeed.</p>\n\n<h2 id=\"testing-generation-locally\">Testing generation locally</h2>\n\n<p>You can test namespace generation by running:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>./bin/generator<span class=\"w\"> </span>namespaces\n</code></pre>\n</div>\n\n<p>To generate the actual lookml (in <code>looker-hub</code>), run:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>./bin/generator<span class=\"w\"> </span>lookml\n</code></pre>\n</div>\n\n<h2 id=\"container-development\">Container Development</h2>\n\n<p>Most code changes will not require changes to the generation script or container.\nHowever, you can test it locally. The following script will test generation, pushing\na new branch to the <code>looker-hub</code> repository:</p>\n\n<pre><code>export HUB_BRANCH_PUBLISH=\"yourname-generation-test-1\"\nexport GIT_SSH_KEY_BASE64=$(cat ~/.ssh/id_rsa | base64)\nmake build &amp;&amp; make run\n</code></pre>\n\n<h2 id=\"deploying-new-lookml-generator-changes\">Deploying new <code>lookml-generator</code> changes</h2>\n\n<p><code>lookml-generator</code> runs daily to update the <code>looker-hub</code> and <code>looker-spoke-default</code> code. Changes\nto the underlying tables should automatically propogate to their respective views and explores.</p>\n\n<p>Airflow updates the two repositories <a href=\"https://github.com/mozilla/telemetry-airflow/blob/main/dags/probe_scraper.py#L320\">each morning</a>.\nIf you need your changes deployed quickly, wait for the container to build after you merge to\n<code>main</code>, and re-run the task in Airflow (<code>lookml_generator</code>, in the <code>probe_scraper</code> DAG).</p>\n\n<h2 id=\"generate-command-explained-high-level-explanation\"><code>generate</code> Command Explained - High Level Explanation</h2>\n\n<p>When <code>make run</code> is executed a Docker container is spun up using the latest <code>lookml-generator</code> Docker image on your machine and runs the <a href=\"bin/generate\"><code>generate</code> script</a> using configuration defined at the top of the script unless <a href=\"./docker-compose.yml#L13-L25\">overridden using environment variables</a> (see the <a href=\"#container-development\">Container Development</a> section above).</p>\n\n<p>Next, the process authenticates with GitHub, clones the <a href=\"https://github.com/mozilla/looker-hub\"><code>looker-hub</code> repository</a>, and creates the branch defined in the <code>HUB_BRANCH_PUBLISH</code> config variable both locally and in the remote. Then it proceeds to checkout into the looker-hub <code>base</code> branch and pulls it from the remote.</p>\n\n<p>Once the setup is done, the process generates <code>namespaces.yaml</code> and uses it to generate LookML code. A git diff is executed to ensure that the files that already exist in the <code>base</code> branch are not being modified. If changes are detected then the process exists with an error code. Otherwise, it proceeds to create a commit and push it to the remote dev branch created earlier.</p>\n\n<p>When following the <code>Container Development</code> steps, the entire process results in a dev branch in <code>looker-hub</code> with brand new generated LookML code which can be tested by going to Looker, switching to the \"development mode\" and selecting the dev branch just created/updated by this command. This will result in Looker using the brand new LookML code just generated. Otherwise, changes merged into <code>main</code> in this repo will become available on looker-hub <code>main</code> when the scheduled Airflow job runs.</p>\n\n<h1 id=\"namespacesyaml\"><code>namespaces.yaml</code></h1>\n\n<p>We use <a href=\"https://github.com/mozilla/looker-hub/blob/main/namespaces.yaml\"><code>namespaces.yaml</code></a> as the declarative listing of the Looker namespaces generated by this repository.</p>\n\n<p>Each entry in <code>namespaces.yaml</code> represents a namespace, and has the following properties:</p>\n\n<ul>\n<li><code>owners</code> (string): The owners are the people who will have control over the associated Namespace folder in Looker. It is up to them to decide which dashboards to \"promote\" to their shared folder.</li>\n<li><code>pretty_name</code> (string): The pretty name is used in most places where the namespace's name is seen, e.g. in the explore drop-down and folder name.</li>\n<li><code>glean_app</code> (bool): Whether or not this namespace represents a Glean Application.</li>\n<li><code>connection</code> (optional string): The database connection to use, as named in Looker. Defaults to <code>telemetry</code>.</li>\n<li><code>views</code> (object): The LookML View files that will be generated. More detailed info below.</li>\n<li><code>explores</code> (object): The LookML Explore files that will be generated. More detailed info below.</li>\n</ul>\n\n<h2 id=\"views\"><code>views</code></h2>\n\n<p>Each View entry is actually a LookML view file that will be generated.\nEach LookML View file can contain multiple Looker Views; the idea here is that these views are related and used together. By convention, the first view in the file is the base view (i.e. associated join views folllow after the explore containing the base dimension and metrics).</p>\n\n<ul>\n<li><code>type</code>: The type of the view, e.g. <code>glean_ping_view</code>.</li>\n<li><code>tables</code>: This field is used in a few ways, depending on the associated View type.</li>\n</ul>\n\n<p>For <code>GleanPingView</code> and <code>PingView</code>, <code>tables</code> represents all of the associated channels for that view. Each table will have a <code>channel</code> and <code>table</code> entry. Only a single view will be created in the LookML File.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">tables</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">channel</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">release</span>\n<span class=\"w\">    </span><span class=\"nt\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">mozdata.org_mozilla_firefox.metrics</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">channel</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">nightly</span>\n<span class=\"w\">    </span><span class=\"nt\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">mozdata.org_mozilla_fenix.metrics</span>\n</code></pre>\n</div>\n\n<p>For <code>ClientCountView</code> and <code>GrowthAccountingView</code>, <code>tables</code> will have a single entry, with the name of the table the Looker View is based off of. Only a single Looker View will be created.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">tables</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">mozdata.org_mozilla_firefox.baseline_clients_last_seen</span>\n</code></pre>\n</div>\n\n<p>For <code>FunnelAnalysisView</code>, only the first list entry is used; inside that entry, each value represents a Looker View that is created. The key is the name of the view, the value is the Looker View or BQ View it is derived from.\nIn the following example, 4 views will be created in the view file: <code>funnel_analysis</code>, <code>event_types</code>, <code>event_type_1</code> and <code>event_type_2</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">tables</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">funnel_analysis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">events_daily_table</span>\n<span class=\"w\">    </span><span class=\"nt\">event_types</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"l l-Scalar l-Scalar-Plain\">mozdata.glean_app.event_types`</span>\n<span class=\"w\">    </span><span class=\"nt\">event_type_1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">event_types</span>\n<span class=\"w\">    </span><span class=\"nt\">event_type_2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">event_types</span>\n</code></pre>\n</div>\n\n<h2 id=\"explores\"><code>explores</code></h2>\n\n<p>Each Explore entry is a single file, sometimes containing multiple explores within it (mainly for things like changing suggestions).</p>\n\n<ul>\n<li><code>type</code> - The type of the explore, e.g. <code>growth_accounting_explore</code>.</li>\n<li><code>views</code> - The views that this is based on. Generally, the allowed keys here are:\n<ul>\n<li><code>base_view</code>: The base view is the one we are basing this Explore on, using <a href=\"https://docs.looker.com/reference/explore-params/view_name\"><code>view_name</code></a>.</li>\n<li><code>extended_view*</code>: Any views we include in the <code>base_view</code> are added as these. It could be one (<code>extended_view</code>) or multiple (<code>extended_view_1</code>).</li>\n<li><code>joined_view*</code>: Any other view we are going to join to this one. _This is only required if the joined view is not defined in the same view file as <code>base_view</code>._</li>\n</ul></li>\n</ul>\n\n<p>It may not necessarily be desirable to list all of the views and explores in the <code>namespace.yaml</code> (e.g. suggest explores specific to a view). In these cases, it is useful to adopt the convention where the first view is the primary view for the explore.</p>\n"}, {"fullname": "generator.cli", "modulename": "generator", "qualname": "cli", "kind": "function", "doc": "<p>Generate and run CLI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prog_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.dashboards", "modulename": "generator.dashboards", "kind": "module", "doc": "<p>All possible dashboard types.</p>\n"}, {"fullname": "generator.dashboards.DASHBOARD_TYPES", "modulename": "generator.dashboards", "qualname": "DASHBOARD_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;operational_monitoring_dashboard&#x27;: &lt;class &#x27;generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard&#x27;&gt;}"}, {"fullname": "generator.dashboards.dashboard", "modulename": "generator.dashboards.dashboard", "kind": "module", "doc": "<p>Generic dashboard type.</p>\n"}, {"fullname": "generator.dashboards.dashboard.Dashboard", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard", "kind": "class", "doc": "<p>A generic Looker Dashboard.</p>\n"}, {"fullname": "generator.dashboards.dashboard.Dashboard.__init__", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.dashboards.dashboard.Dashboard.title", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.dashboards.dashboard.Dashboard.name", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.dashboards.dashboard.Dashboard.layout", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.layout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.dashboards.dashboard.Dashboard.namespace", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.namespace", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.dashboards.dashboard.Dashboard.tables", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.tables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "generator.dashboards.dashboard.Dashboard.type", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.dashboards.dashboard.Dashboard.to_dict", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.to_dict", "kind": "function", "doc": "<p>Dashboard instance represented as a dict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.dashboards.dashboard.Dashboard.to_lookml", "modulename": "generator.dashboards.dashboard", "qualname": "Dashboard.to_lookml", "kind": "function", "doc": "<p>Generate Lookml for this dashboard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard", "modulename": "generator.dashboards.operational_monitoring_dashboard", "kind": "module", "doc": "<p>Class to describe Operational Monitoring Dashboard.</p>\n"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard", "kind": "class", "doc": "<p>An Operational Monitoring dashboard.</p>\n", "bases": "generator.dashboards.dashboard.Dashboard"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.__init__", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.__init__", "kind": "function", "doc": "<p>Get an instance of a Operational Monitoring Dashboard.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.type", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;operational_monitoring_dashboard&#x27;"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.dimensions", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.dimensions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.xaxis", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.xaxis", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.compact_visualization", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.compact_visualization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.group_by_dimension", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.group_by_dimension", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.from_dict", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.from_dict", "kind": "function", "doc": "<p>Get a OperationalMonitoringDashboard from a dict representation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">dashboards</span><span class=\"o\">.</span><span class=\"n\">operational_monitoring_dashboard</span><span class=\"o\">.</span><span class=\"n\">OperationalMonitoringDashboard</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.dashboards.operational_monitoring_dashboard.OperationalMonitoringDashboard.to_lookml", "modulename": "generator.dashboards.operational_monitoring_dashboard", "qualname": "OperationalMonitoringDashboard.to_lookml", "kind": "function", "doc": "<p>Get this dashboard as LookML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.explores", "modulename": "generator.explores", "kind": "module", "doc": "<p>All possible explore types.</p>\n"}, {"fullname": "generator.explores.EXPLORE_TYPES", "modulename": "generator.explores", "qualname": "EXPLORE_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;client_counts_explore&#x27;: &lt;class &#x27;generator.explores.client_counts_explore.ClientCountsExplore&#x27;&gt;, &#x27;events_explore&#x27;: &lt;class &#x27;generator.explores.events_explore.EventsExplore&#x27;&gt;, &#x27;funnel_analysis_explore&#x27;: &lt;class &#x27;generator.explores.funnel_analysis_explore.FunnelAnalysisExplore&#x27;&gt;, &#x27;glean_ping_explore&#x27;: &lt;class &#x27;generator.explores.glean_ping_explore.GleanPingExplore&#x27;&gt;, &#x27;ping_explore&#x27;: &lt;class &#x27;generator.explores.ping_explore.PingExplore&#x27;&gt;, &#x27;growth_accounting_explore&#x27;: &lt;class &#x27;generator.explores.growth_accounting_explore.GrowthAccountingExplore&#x27;&gt;, &#x27;metric_definitions_explore&#x27;: &lt;class &#x27;generator.explores.metric_definitions_explore.MetricDefinitionsExplore&#x27;&gt;, &#x27;operational_monitoring_explore&#x27;: &lt;class &#x27;generator.explores.operational_monitoring_explore.OperationalMonitoringExplore&#x27;&gt;, &#x27;operational_monitoring_alerting_explore&#x27;: &lt;class &#x27;generator.explores.operational_monitoring_explore.OperationalMonitoringAlertingExplore&#x27;&gt;, &#x27;table_explore&#x27;: &lt;class &#x27;generator.explores.table_explore.TableExplore&#x27;&gt;}"}, {"fullname": "generator.explores.client_counts_explore", "modulename": "generator.explores.client_counts_explore", "kind": "module", "doc": "<p>Client Counts explore type.</p>\n"}, {"fullname": "generator.explores.client_counts_explore.ClientCountsExplore", "modulename": "generator.explores.client_counts_explore", "qualname": "ClientCountsExplore", "kind": "class", "doc": "<p>A Client Counts Explore, from Baseline Clients Last Seen.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.client_counts_explore.ClientCountsExplore.type", "modulename": "generator.explores.client_counts_explore", "qualname": "ClientCountsExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;client_counts_explore&#x27;"}, {"fullname": "generator.explores.client_counts_explore.ClientCountsExplore.from_views", "modulename": "generator.explores.client_counts_explore", "qualname": "ClientCountsExplore.from_views", "kind": "function", "doc": "<p>If possible, generate a Client Counts explore for this namespace.</p>\n\n<p>Client counts explores are only created for client_counts views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">client_counts_explore</span><span class=\"o\">.</span><span class=\"n\">ClientCountsExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.client_counts_explore.ClientCountsExplore.from_dict", "modulename": "generator.explores.client_counts_explore", "qualname": "ClientCountsExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">client_counts_explore</span><span class=\"o\">.</span><span class=\"n\">ClientCountsExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.events_explore", "modulename": "generator.explores.events_explore", "kind": "module", "doc": "<p>An explore for Events Views.</p>\n"}, {"fullname": "generator.explores.events_explore.EventsExplore", "modulename": "generator.explores.events_explore", "qualname": "EventsExplore", "kind": "class", "doc": "<p>An Events Explore, from any unnested events table.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.events_explore.EventsExplore.type", "modulename": "generator.explores.events_explore", "qualname": "EventsExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;events_explore&#x27;"}, {"fullname": "generator.explores.events_explore.EventsExplore.from_views", "modulename": "generator.explores.events_explore", "qualname": "EventsExplore.from_views", "kind": "function", "doc": "<p>Where possible, generate EventsExplores for Views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">events_explore</span><span class=\"o\">.</span><span class=\"n\">EventsExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.events_explore.EventsExplore.from_dict", "modulename": "generator.explores.events_explore", "qualname": "EventsExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">events_explore</span><span class=\"o\">.</span><span class=\"n\">EventsExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore", "modulename": "generator.explores.explore", "kind": "module", "doc": "<p>Generic explore type.</p>\n"}, {"fullname": "generator.explores.explore.Explore", "modulename": "generator.explores.explore", "qualname": "Explore", "kind": "class", "doc": "<p>A generic explore.</p>\n"}, {"fullname": "generator.explores.explore.Explore.__init__", "modulename": "generator.explores.explore", "qualname": "Explore.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "generator.explores.explore.Explore.name", "modulename": "generator.explores.explore", "qualname": "Explore.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.explores.explore.Explore.views", "modulename": "generator.explores.explore", "qualname": "Explore.views", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "generator.explores.explore.Explore.views_path", "modulename": "generator.explores.explore", "qualname": "Explore.views_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]", "default_value": "None"}, {"fullname": "generator.explores.explore.Explore.defn", "modulename": "generator.explores.explore", "qualname": "Explore.defn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, str]]", "default_value": "None"}, {"fullname": "generator.explores.explore.Explore.type", "modulename": "generator.explores.explore", "qualname": "Explore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.explores.explore.Explore.to_dict", "modulename": "generator.explores.explore", "qualname": "Explore.to_dict", "kind": "function", "doc": "<p>Explore instance represented as a dict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.to_lookml", "modulename": "generator.explores.explore", "qualname": "Explore.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this explore.</p>\n\n<p>Any generation done in dependent explore's\n<code>_to_lookml</code> takes precedence over these fields.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.get_dependent_views", "modulename": "generator.explores.explore", "qualname": "Explore.get_dependent_views", "kind": "function", "doc": "<p>Get views this explore is dependent on.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.from_dict", "modulename": "generator.explores.explore", "qualname": "Explore.from_dict", "kind": "function", "doc": "<p>Get an instance of an explore from a namespace definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"o\">.</span><span class=\"n\">Explore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.get_view_lookml", "modulename": "generator.explores.explore", "qualname": "Explore.get_view_lookml", "kind": "function", "doc": "<p>Get the LookML for a view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.get_unnested_fields_joins_lookml", "modulename": "generator.explores.explore", "qualname": "Explore.get_unnested_fields_joins_lookml", "kind": "function", "doc": "<p>Get the LookML for joining unnested fields.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.has_view_dimension", "modulename": "generator.explores.explore", "qualname": "Explore.has_view_dimension", "kind": "function", "doc": "<p>Determine whether a this view has this dimension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dimension_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.get_view_time_partitioning_group", "modulename": "generator.explores.explore", "qualname": "Explore.get_view_time_partitioning_group", "kind": "function", "doc": "<p>Get time partitiong dimension group for this view.</p>\n\n<p>Return the name of the first dimension group tagged \"time_partitioning_field\",\nand fall back to \"submission\" if available.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.explore.Explore.get_required_filters", "modulename": "generator.explores.explore", "qualname": "Explore.get_required_filters", "kind": "function", "doc": "<p>Get required filters for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.funnel_analysis_explore", "modulename": "generator.explores.funnel_analysis_explore", "kind": "module", "doc": "<p>Funnel Analysis explore type.</p>\n"}, {"fullname": "generator.explores.funnel_analysis_explore.FunnelAnalysisExplore", "modulename": "generator.explores.funnel_analysis_explore", "qualname": "FunnelAnalysisExplore", "kind": "class", "doc": "<p>A Funnel Analysis Explore, from Baseline Clients Last Seen.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.funnel_analysis_explore.FunnelAnalysisExplore.type", "modulename": "generator.explores.funnel_analysis_explore", "qualname": "FunnelAnalysisExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;funnel_analysis_explore&#x27;"}, {"fullname": "generator.explores.funnel_analysis_explore.FunnelAnalysisExplore.n_funnel_steps", "modulename": "generator.explores.funnel_analysis_explore", "qualname": "FunnelAnalysisExplore.n_funnel_steps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "4"}, {"fullname": "generator.explores.funnel_analysis_explore.FunnelAnalysisExplore.from_views", "modulename": "generator.explores.funnel_analysis_explore", "qualname": "FunnelAnalysisExplore.from_views", "kind": "function", "doc": "<p>If possible, generate a Funnel Analysis explore for this namespace.</p>\n\n<p>Funnel analysis explores are only created for funnel_analysis views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">funnel_analysis_explore</span><span class=\"o\">.</span><span class=\"n\">FunnelAnalysisExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.funnel_analysis_explore.FunnelAnalysisExplore.from_dict", "modulename": "generator.explores.funnel_analysis_explore", "qualname": "FunnelAnalysisExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">funnel_analysis_explore</span><span class=\"o\">.</span><span class=\"n\">FunnelAnalysisExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.glean_ping_explore", "modulename": "generator.explores.glean_ping_explore", "kind": "module", "doc": "<p>Glean Ping explore type.</p>\n"}, {"fullname": "generator.explores.glean_ping_explore.GleanPingExplore", "modulename": "generator.explores.glean_ping_explore", "qualname": "GleanPingExplore", "kind": "class", "doc": "<p>A Glean Ping Table explore.</p>\n", "bases": "generator.explores.ping_explore.PingExplore"}, {"fullname": "generator.explores.glean_ping_explore.GleanPingExplore.type", "modulename": "generator.explores.glean_ping_explore", "qualname": "GleanPingExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;glean_ping_explore&#x27;"}, {"fullname": "generator.explores.glean_ping_explore.GleanPingExplore.from_views", "modulename": "generator.explores.glean_ping_explore", "qualname": "GleanPingExplore.from_views", "kind": "function", "doc": "<p>Generate all possible GleanPingExplores from the views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">ping_explore</span><span class=\"o\">.</span><span class=\"n\">PingExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.glean_ping_explore.GleanPingExplore.from_dict", "modulename": "generator.explores.glean_ping_explore", "qualname": "GleanPingExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a name and dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">glean_ping_explore</span><span class=\"o\">.</span><span class=\"n\">GleanPingExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.growth_accounting_explore", "modulename": "generator.explores.growth_accounting_explore", "kind": "module", "doc": "<p>Growth Accounting explore type.</p>\n"}, {"fullname": "generator.explores.growth_accounting_explore.GrowthAccountingExplore", "modulename": "generator.explores.growth_accounting_explore", "qualname": "GrowthAccountingExplore", "kind": "class", "doc": "<p>A Growth Accounting Explore, from Baseline Clients Last Seen.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.growth_accounting_explore.GrowthAccountingExplore.type", "modulename": "generator.explores.growth_accounting_explore", "qualname": "GrowthAccountingExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;growth_accounting_explore&#x27;"}, {"fullname": "generator.explores.growth_accounting_explore.GrowthAccountingExplore.from_views", "modulename": "generator.explores.growth_accounting_explore", "qualname": "GrowthAccountingExplore.from_views", "kind": "function", "doc": "<p>If possible, generate a Growth Accounting explore for this namespace.</p>\n\n<p>Growth accounting explores are only created for growth_accounting views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">growth_accounting_explore</span><span class=\"o\">.</span><span class=\"n\">GrowthAccountingExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.growth_accounting_explore.GrowthAccountingExplore.from_dict", "modulename": "generator.explores.growth_accounting_explore", "qualname": "GrowthAccountingExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">growth_accounting_explore</span><span class=\"o\">.</span><span class=\"n\">GrowthAccountingExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.metric_definitions_explore", "modulename": "generator.explores.metric_definitions_explore", "kind": "module", "doc": "<p>Metric Hub metrics explore type.</p>\n"}, {"fullname": "generator.explores.metric_definitions_explore.MetricDefinitionsExplore", "modulename": "generator.explores.metric_definitions_explore", "qualname": "MetricDefinitionsExplore", "kind": "class", "doc": "<p>Metric Hub Metrics Explore.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.metric_definitions_explore.MetricDefinitionsExplore.__init__", "modulename": "generator.explores.metric_definitions_explore", "qualname": "MetricDefinitionsExplore.__init__", "kind": "function", "doc": "<p>Initialize MetricDefinitionsExplore.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "generator.explores.metric_definitions_explore.MetricDefinitionsExplore.type", "modulename": "generator.explores.metric_definitions_explore", "qualname": "MetricDefinitionsExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;metric_definitions_explore&#x27;"}, {"fullname": "generator.explores.metric_definitions_explore.MetricDefinitionsExplore.from_views", "modulename": "generator.explores.metric_definitions_explore", "qualname": "MetricDefinitionsExplore.from_views", "kind": "function", "doc": "<p>Generate an Operational Monitoring explore for this namespace.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"o\">.</span><span class=\"n\">Explore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.metric_definitions_explore.MetricDefinitionsExplore.from_dict", "modulename": "generator.explores.metric_definitions_explore", "qualname": "MetricDefinitionsExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">metric_definitions_explore</span><span class=\"o\">.</span><span class=\"n\">MetricDefinitionsExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.metric_definitions_explore.MetricDefinitionsExplore.get_view_time_partitioning_group", "modulename": "generator.explores.metric_definitions_explore", "qualname": "MetricDefinitionsExplore.get_view_time_partitioning_group", "kind": "function", "doc": "<p>Override time partitioning.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.operational_monitoring_explore", "modulename": "generator.explores.operational_monitoring_explore", "kind": "module", "doc": "<p>Operational Monitoring Explore type.</p>\n"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringExplore", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringExplore", "kind": "class", "doc": "<p>An Operational Monitoring Explore.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringExplore.__init__", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringExplore.__init__", "kind": "function", "doc": "<p>Initialize OperationalMonitoringExplore.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringExplore.type", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;operational_monitoring_explore&#x27;"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringExplore.from_views", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringExplore.from_views", "kind": "function", "doc": "<p>Generate an Operational Monitoring explore for this namespace.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"o\">.</span><span class=\"n\">Explore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringExplore.from_dict", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">operational_monitoring_explore</span><span class=\"o\">.</span><span class=\"n\">OperationalMonitoringExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringAlertingExplore", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringAlertingExplore", "kind": "class", "doc": "<p>An Operational Monitoring Alerting Explore.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringAlertingExplore.__init__", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringAlertingExplore.__init__", "kind": "function", "doc": "<p>Initialize OperationalMonitoringExplore.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringAlertingExplore.type", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringAlertingExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;operational_monitoring_alerting_explore&#x27;"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringAlertingExplore.from_views", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringAlertingExplore.from_views", "kind": "function", "doc": "<p>Generate an Operational Monitoring explore for this namespace.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"o\">.</span><span class=\"n\">Explore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.operational_monitoring_explore.OperationalMonitoringAlertingExplore.from_dict", "modulename": "generator.explores.operational_monitoring_explore", "qualname": "OperationalMonitoringAlertingExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">operational_monitoring_explore</span><span class=\"o\">.</span><span class=\"n\">OperationalMonitoringAlertingExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.ping_explore", "modulename": "generator.explores.ping_explore", "kind": "module", "doc": "<p>Ping explore type.</p>\n"}, {"fullname": "generator.explores.ping_explore.PingExplore", "modulename": "generator.explores.ping_explore", "qualname": "PingExplore", "kind": "class", "doc": "<p>A Ping Table explore.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.ping_explore.PingExplore.type", "modulename": "generator.explores.ping_explore", "qualname": "PingExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;ping_explore&#x27;"}, {"fullname": "generator.explores.ping_explore.PingExplore.from_views", "modulename": "generator.explores.ping_explore", "qualname": "PingExplore.from_views", "kind": "function", "doc": "<p>Generate all possible PingExplores from the views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">ping_explore</span><span class=\"o\">.</span><span class=\"n\">PingExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.ping_explore.PingExplore.from_dict", "modulename": "generator.explores.ping_explore", "qualname": "PingExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a name and dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">ping_explore</span><span class=\"o\">.</span><span class=\"n\">PingExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.table_explore", "modulename": "generator.explores.table_explore", "kind": "module", "doc": "<p>Table explore type.</p>\n"}, {"fullname": "generator.explores.table_explore.TableExplore", "modulename": "generator.explores.table_explore", "qualname": "TableExplore", "kind": "class", "doc": "<p>A table explore.</p>\n", "bases": "generator.explores.explore.Explore"}, {"fullname": "generator.explores.table_explore.TableExplore.type", "modulename": "generator.explores.table_explore", "qualname": "TableExplore.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;table_explore&#x27;"}, {"fullname": "generator.explores.table_explore.TableExplore.from_views", "modulename": "generator.explores.table_explore", "qualname": "TableExplore.from_views", "kind": "function", "doc": "<p>Don't generate all possible TableExplores from the views.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">table_explore</span><span class=\"o\">.</span><span class=\"n\">TableExplore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.explores.table_explore.TableExplore.from_dict", "modulename": "generator.explores.table_explore", "qualname": "TableExplore.from_dict", "kind": "function", "doc": "<p>Get an instance of this explore from a name and dictionary definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">defn</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">views_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">explores</span><span class=\"o\">.</span><span class=\"n\">table_explore</span><span class=\"o\">.</span><span class=\"n\">TableExplore</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.lkml_update", "modulename": "generator.lkml_update", "kind": "module", "doc": "<p>An updated lkml parser to handle explore queries.</p>\n"}, {"fullname": "generator.lkml_update.dump", "modulename": "generator.lkml_update", "qualname": "dump", "kind": "function", "doc": "<p>Dump an object as LookML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.lkml_update.UpdatedDictParser", "modulename": "generator.lkml_update", "qualname": "UpdatedDictParser", "kind": "class", "doc": "<p>An updated DictParser that properly handles queries.</p>\n", "bases": "lkml.simple.DictParser"}, {"fullname": "generator.lkml_update.UpdatedDictParser.parse_any", "modulename": "generator.lkml_update", "qualname": "UpdatedDictParser.parse_any", "kind": "function", "doc": "<p>Dynamically serializes a Python object based on its type.</p>\n\n<p>Args:\n    key: A LookML field type (e.g. \"suggestions\" or \"hidden\")\n    value: A string, tuple, or list to serialize\nRaises:\n    TypeError: If input value is not of a valid type\nReturns:\n    A generator of serialized string chunks</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">lkml</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">BlockNode</span><span class=\"p\">,</span> <span class=\"n\">lkml</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">ListNode</span><span class=\"p\">,</span> <span class=\"n\">lkml</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">PairNode</span><span class=\"p\">]],</span> <span class=\"n\">lkml</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">BlockNode</span><span class=\"p\">,</span> <span class=\"n\">lkml</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">ListNode</span><span class=\"p\">,</span> <span class=\"n\">lkml</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">PairNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.lookml", "modulename": "generator.lookml", "kind": "module", "doc": "<p>Generate lookml from namespaces.</p>\n"}, {"fullname": "generator.lookml.FILE_HEADER", "modulename": "generator.lookml", "qualname": "FILE_HEADER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n# *Do not manually modify this file*\\n#\\n# This file has been generated via https://github.com/mozilla/lookml-generator\\n# You can extend this view in the looker-spoke-default project (https://github.com/mozilla/looker-spoke-default)\\n\\n&#x27;"}, {"fullname": "generator.lookml.lookml", "modulename": "generator.lookml", "qualname": "lookml", "kind": "variable", "doc": "<p>Generate lookml from namespaces.</p>\n", "default_value": "&lt;Command lookml&gt;"}, {"fullname": "generator.metrics_utils", "modulename": "generator.metrics_utils", "kind": "module", "doc": "<p>Utils for working with metric-hub.</p>\n"}, {"fullname": "generator.metrics_utils.METRIC_HUB_REPO", "modulename": "generator.metrics_utils", "qualname": "METRIC_HUB_REPO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://github.com/mozilla/metric-hub&#x27;"}, {"fullname": "generator.metrics_utils.MetricsConfigLoader", "modulename": "generator.metrics_utils", "qualname": "MetricsConfigLoader", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;generator.metrics_utils._MetricsConfigLoader object&gt;"}, {"fullname": "generator.namespaces", "modulename": "generator.namespaces", "kind": "module", "doc": "<p>Generate namespaces.yaml.</p>\n"}, {"fullname": "generator.namespaces.DEFAULT_GENERATED_SQL_URI", "modulename": "generator.namespaces", "qualname": "DEFAULT_GENERATED_SQL_URI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://github.com/mozilla/bigquery-etl/archive/generated-sql.tar.gz&#x27;"}, {"fullname": "generator.namespaces.PROBE_INFO_BASE_URI", "modulename": "generator.namespaces", "qualname": "PROBE_INFO_BASE_URI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://probeinfo.telemetry.mozilla.org&#x27;"}, {"fullname": "generator.namespaces.DEFAULT_SPOKE", "modulename": "generator.namespaces", "qualname": "DEFAULT_SPOKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;looker-spoke-default&#x27;"}, {"fullname": "generator.namespaces.OPMON_DATASET", "modulename": "generator.namespaces", "qualname": "OPMON_DATASET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;operational_monitoring&#x27;"}, {"fullname": "generator.namespaces.PROD_PROJECT", "modulename": "generator.namespaces", "qualname": "PROD_PROJECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;moz-fx-data-shared-prod&#x27;"}, {"fullname": "generator.namespaces.namespaces", "modulename": "generator.namespaces", "qualname": "namespaces", "kind": "variable", "doc": "<p>Generate namespaces.yaml.</p>\n", "default_value": "&lt;Command namespaces&gt;"}, {"fullname": "generator.operational_monitoring_utils", "modulename": "generator.operational_monitoring_utils", "kind": "module", "doc": "<p>Utils for operational monitoring.</p>\n"}, {"fullname": "generator.operational_monitoring_utils.get_dimension_defaults", "modulename": "generator.operational_monitoring_utils", "qualname": "get_dimension_defaults", "kind": "function", "doc": "<p>Find default values for certain dimensions.</p>\n\n<p>For a given Operational Monitoring dimension, find its default (most common)\nvalue and its top 10 most common to be used as dropdown options.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bq_client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.operational_monitoring_utils.get_xaxis_val", "modulename": "generator.operational_monitoring_utils", "qualname": "get_xaxis_val", "kind": "function", "doc": "<p>Return whether the x-axis should be build_id or submission_date.</p>\n\n<p>This is based on which one is found in the table provided.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bq_client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.operational_monitoring_utils.get_projects", "modulename": "generator.operational_monitoring_utils", "qualname": "get_projects", "kind": "function", "doc": "<p>Select all operational monitoring projects.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bq_client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">project_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.spoke", "modulename": "generator.spoke", "kind": "module", "doc": "<p>Generate directories and models for new namespaces.</p>\n"}, {"fullname": "generator.spoke.MODEL_SETS_BY_INSTANCE", "modulename": "generator.spoke", "qualname": "MODEL_SETS_BY_INSTANCE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, List[str]]", "default_value": "{&#x27;https://mozilladev.cloud.looker.com&#x27;: [&#x27;mozilla_confidential&#x27;], &#x27;https://mozillastaging.cloud.looker.com&#x27;: [&#x27;mozilla_confidential&#x27;], &#x27;https://mozilla.cloud.looker.com&#x27;: [&#x27;mozilla_confidential&#x27;]}"}, {"fullname": "generator.spoke.DEFAULT_DB_CONNECTION", "modulename": "generator.spoke", "qualname": "DEFAULT_DB_CONNECTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;telemetry&#x27;"}, {"fullname": "generator.spoke.ExploreDict", "modulename": "generator.spoke", "qualname": "ExploreDict", "kind": "class", "doc": "<p>Represent an explore definition.</p>\n", "bases": "typing.TypedDict"}, {"fullname": "generator.spoke.ExploreDict.type", "modulename": "generator.spoke", "qualname": "ExploreDict.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.spoke.ExploreDict.views", "modulename": "generator.spoke", "qualname": "ExploreDict.views", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "generator.spoke.NamespaceDict", "modulename": "generator.spoke", "qualname": "NamespaceDict", "kind": "class", "doc": "<p>Represent a Namespace definition.</p>\n", "bases": "typing.TypedDict"}, {"fullname": "generator.spoke.NamespaceDict.views", "modulename": "generator.spoke", "qualname": "NamespaceDict.views", "kind": "variable", "doc": "<p></p>\n", "annotation": ": generator.views.view.ViewDict"}, {"fullname": "generator.spoke.NamespaceDict.explores", "modulename": "generator.spoke", "qualname": "NamespaceDict.explores", "kind": "variable", "doc": "<p></p>\n", "annotation": ": generator.spoke.ExploreDict"}, {"fullname": "generator.spoke.NamespaceDict.pretty_name", "modulename": "generator.spoke", "qualname": "NamespaceDict.pretty_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.spoke.NamespaceDict.glean_app", "modulename": "generator.spoke", "qualname": "NamespaceDict.glean_app", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "generator.spoke.NamespaceDict.connection", "modulename": "generator.spoke", "qualname": "NamespaceDict.connection", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.spoke.NamespaceDict.spoke", "modulename": "generator.spoke", "qualname": "NamespaceDict.spoke", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.spoke.setup_env_with_looker_creds", "modulename": "generator.spoke", "qualname": "setup_env_with_looker_creds", "kind": "function", "doc": "<p>Set up env with looker credentials.</p>\n\n<p>Returns TRUE if the config is complete.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.spoke.generate_model", "modulename": "generator.spoke", "qualname": "generate_model", "kind": "function", "doc": "<p>Generate a model file for a namespace.</p>\n\n<p>We want these to have a nice label and a unique name.\nWe only import explores and dashboards, as we want those\nto auto-import upon generation.</p>\n\n<p>Views are not imported by default, since they should\nbe added one-by-one if they are included in an explore.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spoke_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">namespace_defn</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">spoke</span><span class=\"o\">.</span><span class=\"n\">NamespaceDict</span>,</span><span class=\"param\">\t<span class=\"n\">db_connection</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.spoke.configure_model", "modulename": "generator.spoke", "qualname": "configure_model", "kind": "function", "doc": "<p>Configure a Looker model by name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sdk</span><span class=\"p\">:</span> <span class=\"n\">looker_sdk</span><span class=\"o\">.</span><span class=\"n\">sdk</span><span class=\"o\">.</span><span class=\"n\">api40</span><span class=\"o\">.</span><span class=\"n\">methods</span><span class=\"o\">.</span><span class=\"n\">Looker40SDK</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_connection</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">spoke_project</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.spoke.generate_directories", "modulename": "generator.spoke", "qualname": "generate_directories", "kind": "function", "doc": "<p>Generate directories and model for a namespace, if it doesn't exist.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">namespaces</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">spoke</span><span class=\"o\">.</span><span class=\"n\">NamespaceDict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">base_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">sdk_setup</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.spoke.update_spoke", "modulename": "generator.spoke", "qualname": "update_spoke", "kind": "variable", "doc": "<p>Generate updates to spoke project.</p>\n", "default_value": "&lt;Command update-spoke&gt;"}, {"fullname": "generator.views", "modulename": "generator.views", "kind": "module", "doc": "<p>All available Looker views.</p>\n"}, {"fullname": "generator.views.VIEW_TYPES", "modulename": "generator.views", "qualname": "VIEW_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;client_counts_view&#x27;: &lt;class &#x27;generator.views.client_counts_view.ClientCountsView&#x27;&gt;, &#x27;events_view&#x27;: &lt;class &#x27;generator.views.events_view.EventsView&#x27;&gt;, &#x27;funnel_analysis_view&#x27;: &lt;class &#x27;generator.views.funnel_analysis_view.FunnelAnalysisView&#x27;&gt;, &#x27;operational_monitoring_view&#x27;: &lt;class &#x27;generator.views.operational_monitoring_view.OperationalMonitoringView&#x27;&gt;, &#x27;operational_monitoring_alerting_view&#x27;: &lt;class &#x27;generator.views.operational_monitoring_alerting_view.OperationalMonitoringAlertingView&#x27;&gt;, &#x27;metric_definitions_view&#x27;: &lt;class &#x27;generator.views.metric_definitions_view.MetricDefinitionsView&#x27;&gt;, &#x27;glean_ping_view&#x27;: &lt;class &#x27;generator.views.glean_ping_view.GleanPingView&#x27;&gt;, &#x27;ping_view&#x27;: &lt;class &#x27;generator.views.ping_view.PingView&#x27;&gt;, &#x27;growth_accounting_view&#x27;: &lt;class &#x27;generator.views.growth_accounting_view.GrowthAccountingView&#x27;&gt;, &#x27;table_view&#x27;: &lt;class &#x27;generator.views.table_view.TableView&#x27;&gt;}"}, {"fullname": "generator.views.client_counts_view", "modulename": "generator.views.client_counts_view", "kind": "module", "doc": "<p>Class to describe a Client Counts View.</p>\n"}, {"fullname": "generator.views.client_counts_view.ClientCountsView", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView", "kind": "class", "doc": "<p>A view for Client Counting measures.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.__init__", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.__init__", "kind": "function", "doc": "<p>Get an instance of a ClientCountsView.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;client_counts&#39;</span></span>)</span>"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.type", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;client_counts_view&#x27;"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.default_dimension_groups", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.default_dimension_groups", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Union[str, List[str]]]]", "default_value": "[{&#x27;name&#x27;: &#x27;since_first_seen&#x27;, &#x27;type&#x27;: &#x27;duration&#x27;, &#x27;description&#x27;: &#x27;Amount of time that has passed since the client was first seen.&#x27;, &#x27;sql_start&#x27;: &#x27;CAST(${TABLE}.first_seen_date AS TIMESTAMP)&#x27;, &#x27;sql_end&#x27;: &#x27;CAST(${TABLE}.submission_date AS TIMESTAMP)&#x27;, &#x27;intervals&#x27;: [&#x27;day&#x27;, &#x27;week&#x27;, &#x27;month&#x27;, &#x27;year&#x27;]}]"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.default_dimensions", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.default_dimensions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]", "default_value": "[{&#x27;name&#x27;: &#x27;have_completed_period&#x27;, &#x27;type&#x27;: &#x27;yesno&#x27;, &#x27;description&#x27;: &#x27;Only for use with cohort analysis. Filter on true to remove the tail of incomplete data from cohorts. Indicates whether the cohort for this row have all had a chance to complete this interval. For example, new clients from yesterday have not all had a chance to send a ping for today.&#x27;, &#x27;sql&#x27;: &quot;\\n              DATE_ADD(\\n                {% if client_counts.first_seen_date._is_selected %}\\n                  DATE_ADD(DATE(${client_counts.first_seen_date}), INTERVAL 1 DAY)\\n                {% elsif client_counts.first_seen_week._is_selected %}\\n                  DATE_ADD(DATE(${client_counts.first_seen_week}), INTERVAL 1 WEEK)\\n                {% elsif client_counts.first_seen_month._is_selected %}\\n                  DATE_ADD(PARSE_DATE(&#x27;%Y-%m&#x27;, ${client_counts.first_seen_month}), INTERVAL 1 MONTH)\\n                {% elsif client_counts.first_seen_year._is_selected %}\\n                  DATE_ADD(DATE(${client_counts.first_seen_year}, 1, 1), INTERVAL 1 YEAR)\\n                {% endif %}\\n                ,\\n                {% if client_counts.days_since_first_seen._is_selected %}\\n                  INTERVAL CAST(${client_counts.days_since_first_seen} AS INT64) DAY\\n                {% elsif client_counts.weeks_since_first_seen._is_selected %}\\n                  INTERVAL CAST(${client_counts.weeks_since_first_seen} AS INT64) WEEK\\n                {% elsif client_counts.months_since_first_seen._is_selected %}\\n                  INTERVAL CAST(${client_counts.months_since_first_seen} AS INT64) MONTH\\n                {% elsif client_counts.years_since_first_seen._is_selected %}\\n                  INTERVAL CAST(${client_counts.months_since_first_seen} AS INT64) YEAR\\n                {% endif %}\\n              ) &lt; current_date\\n              &quot;}]"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.default_measures", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.default_measures", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Union[str, List[Dict[str, str]]]]]", "default_value": "[{&#x27;name&#x27;: &#x27;client_count&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;description&#x27;: &#x27;The number of clients, determined by whether they sent a baseline ping on the day in question.&#x27;, &#x27;sql&#x27;: &#x27;COUNT(DISTINCT ${TABLE}.client_id)&#x27;}]"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.from_db_views", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.from_db_views", "kind": "function", "doc": "<p>Get Client Count Views from db views and app variants.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">client_counts_view</span><span class=\"o\">.</span><span class=\"n\">ClientCountsView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.from_dict", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.from_dict", "kind": "function", "doc": "<p>Get a view from a name and dict definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">client_counts_view</span><span class=\"o\">.</span><span class=\"n\">ClientCountsView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.to_lookml", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.client_counts_view.ClientCountsView.get_measures", "modulename": "generator.views.client_counts_view", "qualname": "ClientCountsView.get_measures", "kind": "function", "doc": "<p>Generate measures for the Growth Accounting Framework.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.datagroups", "modulename": "generator.views.datagroups", "kind": "module", "doc": "<p>Generate datagroup lkml files for each namespace.</p>\n"}, {"fullname": "generator.views.datagroups.DEFAULT_MAX_CACHE_AGE", "modulename": "generator.views.datagroups", "qualname": "DEFAULT_MAX_CACHE_AGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;24 hours&#x27;"}, {"fullname": "generator.views.datagroups.SQL_TRIGGER_TEMPLATE", "modulename": "generator.views.datagroups", "qualname": "SQL_TRIGGER_TEMPLATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;\\n    SELECT MAX(last_modified_time)\\n    FROM `{project_id}`.{dataset_id}.INFORMATION_SCHEMA.PARTITIONS\\n    WHERE table_name = &#x27;{table_id}&#x27;\\n&quot;"}, {"fullname": "generator.views.datagroups.FILE_HEADER", "modulename": "generator.views.datagroups", "qualname": "FILE_HEADER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;# *Do not manually modify this file*\\n\\n# This file has been generated via https://github.com/mozilla/lookml-generator\\n\\n# Using a datagroup in an Explore: https://cloud.google.com/looker/docs/reference/param-explore-persist-with\\n# Using a datagroup in a derived table: https://cloud.google.com/looker/docs/reference/param-view-datagroup-trigger\\n\\n&#x27;"}, {"fullname": "generator.views.datagroups.Datagroup", "modulename": "generator.views.datagroups", "qualname": "Datagroup", "kind": "class", "doc": "<p>Represents a Datagroup.</p>\n"}, {"fullname": "generator.views.datagroups.Datagroup.__init__", "modulename": "generator.views.datagroups", "qualname": "Datagroup.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sql_trigger</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">max_cache_age</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;24 hours&#39;</span></span>)</span>"}, {"fullname": "generator.views.datagroups.Datagroup.name", "modulename": "generator.views.datagroups", "qualname": "Datagroup.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.datagroups.Datagroup.label", "modulename": "generator.views.datagroups", "qualname": "Datagroup.label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.datagroups.Datagroup.sql_trigger", "modulename": "generator.views.datagroups", "qualname": "Datagroup.sql_trigger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.datagroups.Datagroup.description", "modulename": "generator.views.datagroups", "qualname": "Datagroup.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.datagroups.Datagroup.max_cache_age", "modulename": "generator.views.datagroups", "qualname": "Datagroup.max_cache_age", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;24 hours&#x27;"}, {"fullname": "generator.views.datagroups.generate_datagroups", "modulename": "generator.views.datagroups", "qualname": "generate_datagroups", "kind": "function", "doc": "<p>Generate and write a datagroups.lkml file to the namespace folder.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">views</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">target_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.events_view", "modulename": "generator.views.events_view", "kind": "module", "doc": "<p>Class to describe an Events view.</p>\n"}, {"fullname": "generator.views.events_view.EventsView", "modulename": "generator.views.events_view", "qualname": "EventsView", "kind": "class", "doc": "<p>A view for querying events data, with one row per-event.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.events_view.EventsView.__init__", "modulename": "generator.views.events_view", "qualname": "EventsView.__init__", "kind": "function", "doc": "<p>Get an instance of an EventsView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.views.events_view.EventsView.type", "modulename": "generator.views.events_view", "qualname": "EventsView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;events_view&#x27;"}, {"fullname": "generator.views.events_view.EventsView.default_measures", "modulename": "generator.views.events_view", "qualname": "EventsView.default_measures", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]", "default_value": "[{&#x27;name&#x27;: &#x27;event_count&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;description&#x27;: &#x27;The number of times the event(s) occurred.&#x27;}]"}, {"fullname": "generator.views.events_view.EventsView.from_db_views", "modulename": "generator.views.events_view", "qualname": "EventsView.from_db_views", "kind": "function", "doc": "<p>Get Events Views from db views and app variants.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">events_view</span><span class=\"o\">.</span><span class=\"n\">EventsView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.events_view.EventsView.from_dict", "modulename": "generator.views.events_view", "qualname": "EventsView.from_dict", "kind": "function", "doc": "<p>Get a view from a name and dict definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">events_view</span><span class=\"o\">.</span><span class=\"n\">EventsView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.events_view.EventsView.to_lookml", "modulename": "generator.views.events_view", "qualname": "EventsView.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.events_view.EventsView.get_measures", "modulename": "generator.views.events_view", "qualname": "EventsView.get_measures", "kind": "function", "doc": "<p>Generate measures for Events Views.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dimensions</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.funnel_analysis_view", "modulename": "generator.views.funnel_analysis_view", "kind": "module", "doc": "<p>Class to describe a Funnel Analysis View.</p>\n\n<p>We create a single View file and a single Explore file.</p>\n\n<p>The View file has many Looker views defined within it:\n    funnel_analysis: Based on events_daily, has the <code>events</code> string and user dimensions (e.g. country)\n    event_names: The names of events. Used for suggestions.\n    event_N: For each possible funnel step, a single view. This is used to define what that funnel step is.</p>\n\n<p>The Explore's job is to take this generated file an link all those event_N's to the funnel_analysis.\nWe join them via cross join, because event_N views only have 1 row and 1 column - the match_string\nto use for a regex_match on the <code>events</code> string in funnel_analysis.</p>\n\n<p>For example, say we filter event_1 on <code>event</code>: <code>WHERE event in (\"session-start, \"session-end\")</code>\nThen we join that with funnel_analysis: <code>FROM funnel_analysis CROSS JOIN event_1</code>\nThat lets us find out whether the user completed those funnel steps:\n    <code>SELECT REGEXP_CONTAINS(funnel_analysis.events, event_1.match_string) AS completed_step_1</code></p>\n\n<p>The <code>funnel_analysis</code> view has some nice dimensions to hide these details from the end user,\ne.g. <code>completed_funnel_step_N</code>. We can then count those users across dimensions.</p>\n"}, {"fullname": "generator.views.funnel_analysis_view.DEFAULT_NUM_FUNNEL_STEPS", "modulename": "generator.views.funnel_analysis_view", "qualname": "DEFAULT_NUM_FUNNEL_STEPS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "4"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView", "kind": "class", "doc": "<p>A view for doing Funnel Analysis.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView.__init__", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView.__init__", "kind": "function", "doc": "<p>Get an instance of a FunnelAnalysisView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView.type", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;funnel_analysis_view&#x27;"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView.from_db_views", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView.from_db_views", "kind": "function", "doc": "<p>Get Client Count Views from db views and app variants.</p>\n\n<p>We only create a FunnelAnalysisView if we have the two necessary db tables:\n    - events_daily\n    - event_types</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">num_funnel_steps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">funnel_analysis_view</span><span class=\"o\">.</span><span class=\"n\">FunnelAnalysisView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView.from_dict", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView.from_dict", "kind": "function", "doc": "<p>Get a FunnalAnalysisView from a dict representation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">funnel_analysis_view</span><span class=\"o\">.</span><span class=\"n\">FunnelAnalysisView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView.to_lookml", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView.to_lookml", "kind": "function", "doc": "<p>Get this view as LookML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.funnel_analysis_view.FunnelAnalysisView.n_events", "modulename": "generator.views.funnel_analysis_view", "qualname": "FunnelAnalysisView.n_events", "kind": "function", "doc": "<p>Get the number of events allowed in this funnel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.glean_ping_view", "modulename": "generator.views.glean_ping_view", "kind": "module", "doc": "<p>Class to describe a Glean Ping View.</p>\n"}, {"fullname": "generator.views.glean_ping_view.DISTRIBUTION_TYPES", "modulename": "generator.views.glean_ping_view", "qualname": "DISTRIBUTION_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;timing_distribution&#x27;, &#x27;memory_distribution&#x27;, &#x27;custom_distribution&#x27;}"}, {"fullname": "generator.views.glean_ping_view.ALLOWED_TYPES", "modulename": "generator.views.glean_ping_view", "qualname": "ALLOWED_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;jwe&#x27;, &#x27;custom_distribution&#x27;, &#x27;string&#x27;, &#x27;timespan&#x27;, &#x27;url&#x27;, &#x27;quantity&#x27;, &#x27;timing_distribution&#x27;, &#x27;rate&#x27;, &#x27;counter&#x27;, &#x27;boolean&#x27;, &#x27;datetime&#x27;, &#x27;memory_distribution&#x27;, &#x27;labeled_string&#x27;, &#x27;labeled_counter&#x27;, &#x27;text&#x27;, &#x27;uuid&#x27;, &#x27;labeled_boolean&#x27;}"}, {"fullname": "generator.views.glean_ping_view.RENAMED_METRIC_TYPES", "modulename": "generator.views.glean_ping_view", "qualname": "RENAMED_METRIC_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;jwe&#x27;: &#x27;jwe2&#x27;, &#x27;text&#x27;: &#x27;text2&#x27;, &#x27;url&#x27;: &#x27;url2&#x27;}"}, {"fullname": "generator.views.glean_ping_view.DISALLOWED_PINGS", "modulename": "generator.views.glean_ping_view", "qualname": "DISALLOWED_PINGS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;events&#x27;}"}, {"fullname": "generator.views.glean_ping_view.GleanPingView", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView", "kind": "class", "doc": "<p>A view on a ping table for an application using the Glean SDK.</p>\n", "bases": "generator.views.ping_view.PingView"}, {"fullname": "generator.views.glean_ping_view.GleanPingView.type", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;glean_ping_view&#x27;"}, {"fullname": "generator.views.glean_ping_view.GleanPingView.allow_glean", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView.allow_glean", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "generator.views.glean_ping_view.GleanPingView.from_db_views", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView.from_db_views", "kind": "function", "doc": "<p>Generate GleanPingViews from db views.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">klass</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.views.glean_ping_view.GleanPingView.to_lookml", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this view.</p>\n\n<p>The Glean views include a labeled metrics, which need to be joined\nagainst the view in the explore.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.glean_ping_view.GleanPingView.get_dimensions", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView.get_dimensions", "kind": "function", "doc": "<p>Get the set of dimensions for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.glean_ping_view.GleanPingView.get_measures", "modulename": "generator.views.glean_ping_view", "qualname": "GleanPingView.get_measures", "kind": "function", "doc": "<p>Generate measures from a list of dimensions.</p>\n\n<p>When no dimension-specific measures are found, return a single \"count\" measure.</p>\n\n<p>Raise ClickException if dimensions result in duplicate measures.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.growth_accounting_view", "modulename": "generator.views.growth_accounting_view", "kind": "module", "doc": "<p>Class to describe a Growth Accounting View.</p>\n"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView", "kind": "class", "doc": "<p>A view for growth accounting measures.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.__init__", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.__init__", "kind": "function", "doc": "<p>Get an instance of a GrowthAccountingView.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">identifier_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;client_id&#39;</span></span>)</span>"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.type", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;growth_accounting_view&#x27;"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.DEFAULT_IDENTIFIER_FIELD", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.DEFAULT_IDENTIFIER_FIELD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;client_id&#x27;"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.other_dimensions", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.other_dimensions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]", "default_value": "[{&#x27;name&#x27;: &#x27;first&#x27;, &#x27;sql&#x27;: &#x27;{TABLE}.first&#x27;, &#x27;type&#x27;: &#x27;yesno&#x27;, &#x27;hidden&#x27;: &#x27;yes&#x27;}]"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.default_measures", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.default_measures", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Union[str, List[Dict[str, str]]]]]", "default_value": "[{&#x27;name&#x27;: &#x27;overall_active_previous&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;active_last_week&#x27;: &#x27;yes&#x27;}]}, {&#x27;name&#x27;: &#x27;overall_active_current&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;active_this_week&#x27;: &#x27;yes&#x27;}]}, {&#x27;name&#x27;: &#x27;overall_resurrected&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;new_last_week&#x27;: &#x27;no&#x27;}, {&#x27;new_this_week&#x27;: &#x27;no&#x27;}, {&#x27;active_last_week&#x27;: &#x27;no&#x27;}, {&#x27;active_this_week&#x27;: &#x27;yes&#x27;}]}, {&#x27;name&#x27;: &#x27;new_users&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;new_this_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_this_week&#x27;: &#x27;yes&#x27;}]}, {&#x27;name&#x27;: &#x27;established_users_returning&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;new_last_week&#x27;: &#x27;no&#x27;}, {&#x27;new_this_week&#x27;: &#x27;no&#x27;}, {&#x27;active_last_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_this_week&#x27;: &#x27;yes&#x27;}]}, {&#x27;name&#x27;: &#x27;new_users_returning&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;new_last_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_last_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_this_week&#x27;: &#x27;yes&#x27;}]}, {&#x27;name&#x27;: &#x27;new_users_churned_count&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;new_last_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_last_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_this_week&#x27;: &#x27;no&#x27;}]}, {&#x27;name&#x27;: &#x27;established_users_churned_count&#x27;, &#x27;type&#x27;: &#x27;count&#x27;, &#x27;filters&#x27;: [{&#x27;new_last_week&#x27;: &#x27;no&#x27;}, {&#x27;new_this_week&#x27;: &#x27;no&#x27;}, {&#x27;active_last_week&#x27;: &#x27;yes&#x27;}, {&#x27;active_this_week&#x27;: &#x27;no&#x27;}]}, {&#x27;name&#x27;: &#x27;new_users_churned&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;-1 * ${new_users_churned_count}&#x27;}, {&#x27;name&#x27;: &#x27;established_users_churned&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;-1 * ${established_users_churned_count}&#x27;}, {&#x27;name&#x27;: &#x27;overall_churned&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;${new_users_churned} + ${established_users_churned}&#x27;}, {&#x27;name&#x27;: &#x27;overall_retention_rate&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE((${established_users_returning} + ${new_users_returning}),${overall_active_previous})&#x27;}, {&#x27;name&#x27;: &#x27;established_user_retention_rate&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${established_users_returning},(${established_users_returning} + ${established_users_churned_count}))&#x27;}, {&#x27;name&#x27;: &#x27;new_user_retention_rate&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${new_users_returning},(${new_users_returning} + ${new_users_churned_count}))&#x27;}, {&#x27;name&#x27;: &#x27;overall_churn_rate&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE((${established_users_churned_count} + ${new_users_churned_count}),${overall_active_previous})&#x27;}, {&#x27;name&#x27;: &#x27;fraction_of_active_resurrected&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${overall_resurrected}, ${overall_active_current})&#x27;}, {&#x27;name&#x27;: &#x27;fraction_of_active_new&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${new_users}, ${overall_active_current})&#x27;}, {&#x27;name&#x27;: &#x27;fraction_of_active_established_returning&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${established_users_returning},${overall_active_current})&#x27;}, {&#x27;name&#x27;: &#x27;fraction_of_active_new_returning&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${new_users_returning}, ${overall_active_current})&#x27;}, {&#x27;name&#x27;: &#x27;quick_ratio&#x27;, &#x27;type&#x27;: &#x27;number&#x27;, &#x27;sql&#x27;: &#x27;SAFE_DIVIDE(${new_users} + ${overall_resurrected},${established_users_churned_count} + ${new_users_churned_count})&#x27;}]"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.identifier_field", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.identifier_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.get_default_dimensions", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.get_default_dimensions", "kind": "function", "doc": "<p>Get dimensions to be added to GrowthAccountingView by default.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">klass</span>, </span><span class=\"param\"><span class=\"n\">identifier_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;client_id&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.from_db_views", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.from_db_views", "kind": "function", "doc": "<p>Get Growth Accounting Views from db views and app variants.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">identifier_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;client_id&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">growth_accounting_view</span><span class=\"o\">.</span><span class=\"n\">GrowthAccountingView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.from_dict", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.from_dict", "kind": "function", "doc": "<p>Get a view from a name and dict definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">growth_accounting_view</span><span class=\"o\">.</span><span class=\"n\">GrowthAccountingView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.to_lookml", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.growth_accounting_view.GrowthAccountingView.get_measures", "modulename": "generator.views.growth_accounting_view", "qualname": "GrowthAccountingView.get_measures", "kind": "function", "doc": "<p>Generate measures for the Growth Accounting Framework.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.lookml_utils", "modulename": "generator.views.lookml_utils", "kind": "module", "doc": "<p>Utils for generating lookml.</p>\n"}, {"fullname": "generator.views.lookml_utils.BIGQUERY_TYPE_TO_DIMENSION_TYPE", "modulename": "generator.views.lookml_utils", "qualname": "BIGQUERY_TYPE_TO_DIMENSION_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;BIGNUMERIC&#x27;: &#x27;string&#x27;, &#x27;BOOLEAN&#x27;: &#x27;yesno&#x27;, &#x27;BYTES&#x27;: &#x27;string&#x27;, &#x27;DATE&#x27;: &#x27;time&#x27;, &#x27;DATETIME&#x27;: &#x27;time&#x27;, &#x27;FLOAT&#x27;: &#x27;number&#x27;, &#x27;INTEGER&#x27;: &#x27;number&#x27;, &#x27;NUMERIC&#x27;: &#x27;number&#x27;, &#x27;STRING&#x27;: &#x27;string&#x27;, &#x27;TIME&#x27;: &#x27;time&#x27;, &#x27;TIMESTAMP&#x27;: &#x27;time&#x27;}"}, {"fullname": "generator.views.lookml_utils.HIDDEN_DIMENSIONS", "modulename": "generator.views.lookml_utils", "qualname": "HIDDEN_DIMENSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{(&#x27;additional_properties&#x27;,), (&#x27;client_info&#x27;, &#x27;client_id&#x27;), (&#x27;context_id&#x27;,), (&#x27;document_id&#x27;,), (&#x27;client_id&#x27;,)}"}, {"fullname": "generator.views.lookml_utils.MAP_LAYER_NAMES", "modulename": "generator.views.lookml_utils", "qualname": "MAP_LAYER_NAMES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{(&#x27;country&#x27;,): &#x27;countries&#x27;, (&#x27;metadata&#x27;, &#x27;geo&#x27;, &#x27;country&#x27;): &#x27;countries&#x27;}"}, {"fullname": "generator.views.lookml_utils.escape_filter_expr", "modulename": "generator.views.lookml_utils", "qualname": "escape_filter_expr", "kind": "function", "doc": "<p>Escape filter expression for special Looker chars.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.lookml_utils.render_template", "modulename": "generator.views.lookml_utils", "qualname": "render_template", "kind": "function", "doc": "<p>Render a given template using Jinja.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">template_folder</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.lookml_utils.get_distinct_vals", "modulename": "generator.views.lookml_utils", "qualname": "get_distinct_vals", "kind": "function", "doc": "<p>Given a table and column name, return all distinct values for that column.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bq_client</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"o\">.</span><span class=\"n\">bigquery</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.views.lookml_utils.slug_to_title", "modulename": "generator.views.lookml_utils", "qualname": "slug_to_title", "kind": "function", "doc": "<p>Convert a slug to title case.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slug</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "generator.views.lookml_utils.BQViewReferenceMap", "modulename": "generator.views.lookml_utils", "qualname": "BQViewReferenceMap", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Dict[str, typing.Dict[str, typing.List[typing.List[str]]]]"}, {"fullname": "generator.views.lookml_utils.get_bigquery_view_reference_map", "modulename": "generator.views.lookml_utils", "qualname": "get_bigquery_view_reference_map", "kind": "function", "doc": "<p>Get a mapping from BigQuery datasets to views with references.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">generated_sql_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.metric_definitions_view", "modulename": "generator.views.metric_definitions_view", "kind": "module", "doc": "<p>Class to describe a view with metrics from metric-hub.</p>\n"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView", "kind": "class", "doc": "<p>A view for metric-hub metrics that come from the same data source.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.__init__", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.__init__", "kind": "function", "doc": "<p>Get an instance of an MetricDefinitionsView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.type", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;metric_definitions_view&#x27;"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.from_db_views", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.from_db_views", "kind": "function", "doc": "<p>Get Metric Definition Views from db views and app variants.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">metric_definitions_view</span><span class=\"o\">.</span><span class=\"n\">MetricDefinitionsView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.from_dict", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.from_dict", "kind": "function", "doc": "<p>Get a MetricDefinitionsView from a dict representation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">definition</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">metric_definitions_view</span><span class=\"o\">.</span><span class=\"n\">MetricDefinitionsView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.to_lookml", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.to_lookml", "kind": "function", "doc": "<p>Get this view as LookML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.get_dimensions", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.get_dimensions", "kind": "function", "doc": "<p>Get the set of dimensions for this view based on the metric definitions in metric-hub.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">_bq_client</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_table</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.metric_definitions_view.MetricDefinitionsView.get_dimension_groups", "modulename": "generator.views.metric_definitions_view", "qualname": "MetricDefinitionsView.get_dimension_groups", "kind": "function", "doc": "<p>Get dimension groups for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.operational_monitoring_alerting_view", "modulename": "generator.views.operational_monitoring_alerting_view", "kind": "module", "doc": "<p>Class to describe an Operational Monitoring Alert View.</p>\n"}, {"fullname": "generator.views.operational_monitoring_alerting_view.OperationalMonitoringAlertingView", "modulename": "generator.views.operational_monitoring_alerting_view", "qualname": "OperationalMonitoringAlertingView", "kind": "class", "doc": "<p>A view on a alert operational monitoring table.</p>\n", "bases": "generator.views.operational_monitoring_view.OperationalMonitoringView"}, {"fullname": "generator.views.operational_monitoring_alerting_view.OperationalMonitoringAlertingView.type", "modulename": "generator.views.operational_monitoring_alerting_view", "qualname": "OperationalMonitoringAlertingView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;operational_monitoring_alerting_view&#x27;"}, {"fullname": "generator.views.operational_monitoring_alerting_view.OperationalMonitoringAlertingView.to_lookml", "modulename": "generator.views.operational_monitoring_alerting_view", "qualname": "OperationalMonitoringAlertingView.to_lookml", "kind": "function", "doc": "<p>Get this view as LookML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.operational_monitoring_view", "modulename": "generator.views.operational_monitoring_view", "kind": "module", "doc": "<p>Class to describe an Operational Monitoring View.</p>\n"}, {"fullname": "generator.views.operational_monitoring_view.ALLOWED_DIMENSIONS", "modulename": "generator.views.operational_monitoring_view", "qualname": "ALLOWED_DIMENSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;statistic&#x27;, &#x27;parameter&#x27;, &#x27;branch&#x27;, &#x27;metric&#x27;}"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView", "kind": "class", "doc": "<p>A view on a operational monitoring table.</p>\n", "bases": "generator.views.ping_view.PingView"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView.__init__", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView.__init__", "kind": "function", "doc": "<p>Create instance of a OperationalMonitoringView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView.type", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;operational_monitoring_view&#x27;"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView.dimensions", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView.dimensions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView.from_dict", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView.from_dict", "kind": "function", "doc": "<p>Get a OperationalMonitoringView from a dict representation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">operational_monitoring_view</span><span class=\"o\">.</span><span class=\"n\">OperationalMonitoringView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView.to_lookml", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView.to_lookml", "kind": "function", "doc": "<p>Get this view as LookML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.operational_monitoring_view.OperationalMonitoringView.get_measures", "modulename": "generator.views.operational_monitoring_view", "qualname": "OperationalMonitoringView.get_measures", "kind": "function", "doc": "<p>Get OpMon measures.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.ping_view", "modulename": "generator.views.ping_view", "kind": "module", "doc": "<p>Class to describe a Ping View.</p>\n"}, {"fullname": "generator.views.ping_view.PingView", "modulename": "generator.views.ping_view", "qualname": "PingView", "kind": "class", "doc": "<p>A view on a ping table.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.ping_view.PingView.__init__", "modulename": "generator.views.ping_view", "qualname": "PingView.__init__", "kind": "function", "doc": "<p>Create instance of a PingView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "generator.views.ping_view.PingView.type", "modulename": "generator.views.ping_view", "qualname": "PingView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;ping_view&#x27;"}, {"fullname": "generator.views.ping_view.PingView.allow_glean", "modulename": "generator.views.ping_view", "qualname": "PingView.allow_glean", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "generator.views.ping_view.PingView.from_db_views", "modulename": "generator.views.ping_view", "qualname": "PingView.from_db_views", "kind": "function", "doc": "<p>Get Looker views for a namespace.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">ping_view</span><span class=\"o\">.</span><span class=\"n\">PingView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.ping_view.PingView.from_dict", "modulename": "generator.views.ping_view", "qualname": "PingView.from_dict", "kind": "function", "doc": "<p>Get a view from a name and dict definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">ping_view</span><span class=\"o\">.</span><span class=\"n\">PingView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.ping_view.PingView.to_lookml", "modulename": "generator.views.ping_view", "qualname": "PingView.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.ping_view.PingView.get_dimensions", "modulename": "generator.views.ping_view", "qualname": "PingView.get_dimensions", "kind": "function", "doc": "<p>Get the set of dimensions for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.ping_view.PingView.get_measures", "modulename": "generator.views.ping_view", "qualname": "PingView.get_measures", "kind": "function", "doc": "<p>Generate measures from a list of dimensions.</p>\n\n<p>When no dimension-specific measures are found, return a single \"count\" measure.</p>\n\n<p>Raise ClickException if dimensions result in duplicate measures.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.table_view", "modulename": "generator.views.table_view", "kind": "module", "doc": "<p>Class to describe a Table View.</p>\n"}, {"fullname": "generator.views.table_view.TableView", "modulename": "generator.views.table_view", "qualname": "TableView", "kind": "class", "doc": "<p>A view on any table.</p>\n", "bases": "generator.views.view.View"}, {"fullname": "generator.views.table_view.TableView.__init__", "modulename": "generator.views.table_view", "qualname": "TableView.__init__", "kind": "function", "doc": "<p>Create instance of a TableView.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">measures</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "generator.views.table_view.TableView.type", "modulename": "generator.views.table_view", "qualname": "TableView.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;table_view&#x27;"}, {"fullname": "generator.views.table_view.TableView.measures", "modulename": "generator.views.table_view", "qualname": "TableView.measures", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, Dict[str, Any]]]"}, {"fullname": "generator.views.table_view.TableView.from_db_views", "modulename": "generator.views.table_view", "qualname": "TableView.from_db_views", "kind": "function", "doc": "<p>Get Looker views for a namespace.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">table_view</span><span class=\"o\">.</span><span class=\"n\">TableView</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.table_view.TableView.from_dict", "modulename": "generator.views.table_view", "qualname": "TableView.from_dict", "kind": "function", "doc": "<p>Get a view from a name and dict definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">table_view</span><span class=\"o\">.</span><span class=\"n\">TableView</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.table_view.TableView.to_lookml", "modulename": "generator.views.table_view", "qualname": "TableView.to_lookml", "kind": "function", "doc": "<p>Generate LookML for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view", "modulename": "generator.views.view", "kind": "module", "doc": "<p>Generic class to describe Looker views.</p>\n"}, {"fullname": "generator.views.view.OMIT_VIEWS", "modulename": "generator.views.view", "qualname": "OMIT_VIEWS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Set[str]", "default_value": "set()"}, {"fullname": "generator.views.view.ViewDict", "modulename": "generator.views.view", "qualname": "ViewDict", "kind": "class", "doc": "<p>Represent a view definition.</p>\n", "bases": "typing.TypedDict"}, {"fullname": "generator.views.view.ViewDict.type", "modulename": "generator.views.view", "qualname": "ViewDict.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.view.ViewDict.tables", "modulename": "generator.views.view", "qualname": "ViewDict.tables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "generator.views.view.ViewDict.measures", "modulename": "generator.views.view", "qualname": "ViewDict.measures", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Dict[str, Any]]"}, {"fullname": "generator.views.view.View", "modulename": "generator.views.view", "qualname": "View", "kind": "class", "doc": "<p>A generic Looker View.</p>\n"}, {"fullname": "generator.views.view.View.__init__", "modulename": "generator.views.view", "qualname": "View.__init__", "kind": "function", "doc": "<p>Create an instance of a view.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">view_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "generator.views.view.View.name", "modulename": "generator.views.view", "qualname": "View.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.view.View.view_type", "modulename": "generator.views.view", "qualname": "View.view_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.view.View.tables", "modulename": "generator.views.view", "qualname": "View.tables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "generator.views.view.View.namespace", "modulename": "generator.views.view", "qualname": "View.namespace", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "generator.views.view.View.from_db_views", "modulename": "generator.views.view", "qualname": "View.from_db_views", "kind": "function", "doc": "<p>Get Looker views from app.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_glean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">db_views</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.from_dict", "modulename": "generator.views.view", "qualname": "View.from_dict", "kind": "function", "doc": "<p>Get a view from a name and dict definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">klass</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">_dict</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">ViewDict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.get_type", "modulename": "generator.views.view", "qualname": "View.get_type", "kind": "function", "doc": "<p>Get the type of this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.as_dict", "modulename": "generator.views.view", "qualname": "View.as_dict", "kind": "function", "doc": "<p>Get this view as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.get_dimensions", "modulename": "generator.views.view", "qualname": "View.get_dimensions", "kind": "function", "doc": "<p>Get the set of dimensions for this view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.to_lookml", "modulename": "generator.views.view", "qualname": "View.to_lookml", "kind": "function", "doc": "<p>Generate Lookml for this view.</p>\n\n<p>View instances can generate more than one Looker view,\nfor e.g. nested fields and joins, so this returns\na list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bq_client</span>, </span><span class=\"param\"><span class=\"n\">v1_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.get_client_id", "modulename": "generator.views.view", "qualname": "View.get_client_id", "kind": "function", "doc": "<p>Return the first field that looks like a client identifier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "generator.views.view.View.get_document_id", "modulename": "generator.views.view", "qualname": "View.get_document_id", "kind": "function", "doc": "<p>Return the first field that looks like a document_id.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dimensions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();